// import fs from "fs";
// import {protos} from 'google-ads-node'
const fs = require('fs');
const { protos } = require('polochon-google-ads-node');

const Version = 'v15';
const GoogleAdsEnums = protos.google.ads.googleads.v15.enums;
console.log(GoogleAdsEnums)

for (const [fullName, def] of Object.entries(GoogleAdsEnums)) {
    const [name] = fullName.split("Enum");
    const values = def[name];
    const pairs = Object.keys(values).map((key) => {
        const protoVal = values[key];
        return `${key} = '${key}',`;
    });
    const enumStr = `export enum ${name} {
      ${pairs.join("\n")}
    }`;

}

async function compileEnums() {
    // export async function compileEnums() {
    const stream = fs.createWriteStream('./enum.ts');
    stream.write(`/* Autogenerated File! Do Not Edit */\n`);

    // Put all the enums inside an "enum" namespace
    stream.write("\n// eslint-disable-next-line\n");
    stream.write("export namespace enums {\n");

    for (const [fullName, def] of Object.entries(GoogleAdsEnums)) {
        const [name] = fullName.split("Enum");
        const values = def[name];
        const pairs = Object.keys(values).map((key) => {
            const protoVal = values[key];
            return `${key} = ${protoVal}, // ${key}`;
        });
        const enumStr = `export enum ${name} {
      ${pairs.join("\n")}
    }`;

        const docsLink = buildEnumLink(Version, fullName, name);

        stream.write(`\n/**
    * @name ${fullName}.${name}
    * @link ${docsLink}
    */`);
        stream.write(`\n${enumStr}\n`);
    }

    stream.write("}\n");
    stream.end();

    return Promise.resolve();
}

function buildEnumLink(version, fullName, shortName) {
    return `https://developers.google.com/google-ads/api/reference/rpc/${version}/${fullName}.${shortName} `;
}

compileEnums().then(() => {
    console.log('ok');
}).catch((err) => {
    console.error('err');
})
